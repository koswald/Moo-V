<?xml version="1.0" encoding="UTF-8"?>

<!--

Based on the pom file from
http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started-installing-spring-boot

The following notes apply to an attempt to configure a single pom file that works with both Eclipse and spring-boot.

Note 1: item required by Eclipse, but not not required with spring-boot*
Note 2: modification, required by Eclipse
Note 3: item required by Eclipse, but not allowed with spring-boot*

* spring-boot run from the command-line command: mvn spring-boot:run

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>karl-oswald</artifactId>
  <groupId>KarlOswald.MovieList</groupId>
  <name>Angular OMDB Project, back end</name>
  <description>Back end restAPI component of a full-stack bench project featuring AngularJS 1.5 with Spring Boot, Hibernate, and PostgreSQL</description>
  <url>http://localhost:5555/</url>
  <organization>
    <name></name>
    <url></url>
  </organization>
  <version>0.0.1</version>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.3.5.RELEASE</version>
    <!-- Note 2 -->
    <!-- <version>1.4.0.BUILD-SNAPSHOT</version> -->

    <relativePath />
    <!-- see https://issues.apache.org/jira/browse/MNG-4687 -->
  </parent>

  <dependencies>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <version>1.3.5.RELEASE</version>
      <!-- Note 1 -->
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
      <version>1.3.5.RELEASE</version>
      <!-- Note 1 -->
    </dependency>

    <!-- javax.inject -->
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <version>1</version>
    </dependency>

    <!-- junit -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>

    <!-- postgresql -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>9.4-1206-jdbc42</version>
    </dependency>

    <!-- hibernate-entitymanager -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <!--   <version>5.1.0.Final</version> -->
      <!-- Note 3 -->
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.9.5</version>
      <scope>test</scope>
    </dependency>

    <!-- eclemma code coverage -->
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>jacoco-maven-plugin</artifactId>
      <version>0.7.6.201602180812</version>
    </dependency>
  </dependencies>

  <build>

    <plugins>

      <!-- java version -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>

      <!-- Executable jars and Java

            Java does not provide any standard way to load nested jar files (i.e. jar
            files that are themselves contained within a jar). This can be
            problematic if you are looking to distribute a self-contained application.

            To solve this problem, many developers use uber jars. An uber jar
            simply packages all classes, from all jars, into a single archive. The
            problem with this approach is that it becomes hard to see which libraries
            you are actually using in your application. It can also be problematic if
            the same filename is used (but with different content) in multiple jars.

            Spring Boot takes a different approach and allows you to actually nest jars directly. -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <!-- (you don't need this if you are using a .RELEASE version) -->
  <repositories>
    <repository>
      <id>spring-snapshots</id>
      <url>http://repo.spring.io/snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>spring-milestones</id>
      <url>http://repo.spring.io/milestone</url>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>spring-snapshots</id>
      <url>http://repo.spring.io/snapshot</url>
    </pluginRepository>
    <pluginRepository>
      <id>spring-milestones</id>
      <url>http://repo.spring.io/milestone</url>
    </pluginRepository>
  </pluginRepositories>
</project>
